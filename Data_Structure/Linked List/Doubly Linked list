# 15 --> 6 --> 8

class Node():
  def __init__(self, data):
    self.data = data
    self.next = None
    self.back = None
    
class DoublyLinkedList():
  def __init__(self):
    self.head = None
    self.tail = None
  
  def append(self, data): # O(1)
    new_node = Node(data)
    if self.head == None:
        self.head = new_node
        self.tail = self.head
        self.length = 1
    else:
        self.tail.next = new_node
        new_node.back = self.tail
        self.tail = new_node 
        self.length += 1

  def prepend(self, data): # O(1)
    new_node = Node(data)
    if self.head == None:
        self.head = new_node
        self.tail = self.head
    else:
        new_node.next = self.head 
        self.head.back = new_node
        self.head = new_node
    self.length += 1

  def insert(self, index, data):  # O(n)
    new_node = Node(data)
    
    if index>=self.length:
        self.append(data)
        return 
    if index ==0:
        self.prepend(data)
        return
  
    i = 0
    cur_node = self.head
    while i < self.length:
        if i == index-1:
            cur_node.next, new_node.next = new_node, cur_node.next
            cur_node.back, new_node.back = new_node, cur_node
            self.length+=1
            break
        cur_node = cur_node.next
        i+=1
    

  def remove(self, index): # O(n)
    # i=0
    if index>=self.length:
        print("Entered wrong index")
      
    if self.head == None:
        print("Linked List is empty. Nothing to remove.")
    
    if index == 0:
        self.head = self.head.next
        if self.head == None or self.head.next == None:
            self.tail = self.head
        if self.head != None:
            self.head.back = None  
            
        self.length -= 1   
        return       

    if index >= self.length:
        index = self.length - 1

    cur_node = self.head
    for i in range(index - 1):
        cur_node = cur_node.next
    cur_node.next = cur_node.next.next
    
    if cur_node.next != None:
        cur_node.next.back = cur_node
    else:   
        self.tail = cur_node
    self.length -= 1
    return 
    
    
    
    # while i < self.length:
    #   if i == index-1:
    #     cur_node.next = cur_node.next.next
    #     #cur_node.next.back = cur_node
    #     self.length-=1
    #     break
    #   i+=1
    #   cur_node = cur_node.next
    
  def printl(self):  # O(n)
    cur_node = self.head
    while cur_node != None:
      print(cur_node.data , end = ' ')
      cur_node = cur_node.next
    print()
    print('Length = '+str(self.length))

#   def reverse(self): # O(n)
#     prev = None
#     self.tail = self.head 
    
#     while self.head != None:
#       cur_node = self.head
#       self.head = self.head.next
#       cur_node.next = prev
#       prev = cur_node  
      
#     self.head = cur_node
    

l = DoublyLinkedList()
l.append(10)
l.append(5)
l.append(6)
l.prepend(1)
l.insert(2,99)
l.insert(34,23)
l.remove(5)
# l.reverse()
l.printl()
print(l.head.data, l.tail.data)